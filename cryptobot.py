from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import requests
from datetime import datetime, timezone
from pytz import timezone
import ccxt


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –∫—Ä–∏–ø—Ç–æ–±–æ—Ç. –Ø –±—É–¥—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥.")


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É —Å—Ç—Ä–∞—Ö—É —Ç–∞ –∂–∞–¥—ñ–±–Ω–æ—Å—Ç—ñ
def get_fear_greed_index():
    try:
        url = "https://api.alternative.me/fng/"
        response = requests.get(url)
        data = response.json()

        # –ü–µ—Ä–µ–∫–ª–∞–¥ –∑–Ω–∞—á–µ–Ω—å —ñ–Ω–¥–µ–∫—Å—É —Å—Ç—Ä–∞—Ö—É —Ç–∞ –∂–∞–¥—ñ–±–Ω–æ—Å—Ç—ñ
        translations = {
            "Extreme Fear": "–ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏–π —Å—Ç—Ä–∞—Ö",
            "Fear": "–°—Ç—Ä–∞—Ö",
            "Neutral": "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ",
            "Greed": "–ñ–∞–¥—ñ–±–Ω—ñ—Å—Ç—å",
            "Extreme Greed": "–ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞ –∂–∞–¥—ñ–±–Ω—ñ—Å—Ç—å"
        }

        value_classification = data['data'][0]['value_classification']
        translated_classification = translations.get(value_classification, value_classification)

        return {
            'value': data['data'][0]['value'],
            'value_classification': translated_classification,
            'timestamp': data['data'][0]['timestamp']
        }
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω–¥–µ–∫—Å—É —Å—Ç—Ä–∞—Ö—É —Ç–∞ –∂–∞–¥—ñ–±–Ω–æ—Å—Ç—ñ: {e}")
        return {'value': 'N/A', 'value_classification': 'N/A', 'timestamp': 'N/A'}


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏
def get_crypto_data():
    try:
        exchange = ccxt.binance()

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ BTC —ñ ETH
        btc = exchange.fetch_ticker('BTC/USDT')
        eth = exchange.fetch_ticker('ETH/USDT')

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—é
        market_data = requests.get('https://api.coingecko.com/api/v3/global').json()

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è —ñ –ø–∞–¥—ñ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–∞—Ä –∑ USDT
        tickers = exchange.fetch_tickers()
        changes = [
            (symbol, ticker['last'], ticker['percentage'])
            for symbol, ticker in tickers.items()
            if ticker.get('percentage') is not None and symbol.endswith('/USDT')  # –§—ñ–ª—å—Ç—Ä –¥–ª—è –ø–∞—Ä –∑ USDT
        ]

        top_gainers = sorted(changes, key=lambda x: x[2], reverse=True)[:3]
        top_losers = sorted(changes, key=lambda x: x[2])[:3]

        return {
            'btc_price': btc['last'],
            'btc_change': btc['percentage'],
            'eth_price': eth['last'],
            'eth_change': eth['percentage'],
            'btc_market_cap': market_data['data']['total_market_cap']['btc'],
            'eth_market_cap': market_data['data']['total_market_cap']['eth'],
            'btc_dominance': market_data['data']['market_cap_percentage']['btc'],
            'eth_dominance': market_data['data']['market_cap_percentage']['eth'],
            'total_market_cap': market_data['data']['total_market_cap']['usd'],
            'total_volume': market_data['data']['total_volume']['usd'],
            'top_gainers': top_gainers,
            'top_losers': top_losers
        }
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
        return {}

def format_number(value):
    """
    –§–æ—Ä–º–∞—Ç—É—î –≤–µ–ª–∏–∫—ñ —á–∏—Å–ª–∞ —É —Å–∫–æ—Ä–æ—á–µ–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ (–º–ª–Ω, –º–ª—Ä–¥, —Ç—Ä–ª–Ω).
    """
    try:
        value = float(value)
        if value >= 1_000_000_000_000:
            return f"{value / 1_000_000_000_000:.2f}T"  # –¢—Ä–∏–ª—å–π–æ–Ω–∏
        elif value >= 1_000_000_000:
            return f"{value / 1_000_000_000:.2f}B"  # –ú—ñ–ª—å—è—Ä–¥–∏
        elif value >= 1_000_000:
            return f"{value / 1_000_000:.2f}M"  # –ú—ñ–ª—å–π–æ–Ω–∏
        else:
            return f"{value:.2f}"  # –ó–∞–ª–∏—à–∏—Ç–∏ –±–µ–∑ –∑–º—ñ–Ω –¥–ª—è –º–µ–Ω—à–∏—Ö —á–∏—Å–µ–ª
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–ª–∞: {e}")
        return "N/A"

# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def format_message():
    data = get_crypto_data()
    fear_greed = get_fear_greed_index()

    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–∏—ó–≤—Å—å–∫–æ–≥–æ —á–∞—Å—É
    kyiv_tz = timezone('Europe/Kiev')
    current_time = datetime.now(kyiv_tz).strftime('%Y-%m-%d %H:%M:%S')

    message = (
        f"–î–∞—Ç–∞ —Ç–∞ —á–∞—Å (–ö–∏—ó–≤): {current_time}\n\n"
        f"üí≤ –¶—ñ–Ω–∞ BTC: ~${data['btc_price']:.2f} ({data['btc_change']}%)\n"
        f"üí≤ –¶—ñ–Ω–∞ ETH: ~${data['eth_price']:.2f} ({data['eth_change']}%)\n\n"
        f"üí™ –î–æ–º—ñ–Ω–∞—Ü—ñ—è BTC: {data['btc_dominance']:.2f}%\n"
        f"üí™ –î–æ–º—ñ–Ω–∞—Ü—ñ—è ETH: {data['eth_dominance']:.2f}%\n\n"
        f"üò® –Ü–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö—É —Ç–∞ –∂–∞–¥—ñ–±–Ω–æ—Å—Ç—ñ: {fear_greed['value']} ({fear_greed['value_classification']})\n\n"
        f"üìà –¢–æ–ø 3 –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è –∑–∞ –¥–æ–±—É:\n"
    )

    for gainer in data['top_gainers']:
        message += f"üöÄ {gainer[0]}   ~${gainer[1]:.2f}   [+{gainer[2]:.2f}%]\n"

    message += "\nüìâ –¢–æ–ø 3 –∑–Ω–∏–∂–µ–Ω–Ω—è –∑–∞ –¥–æ–±—É:\n"
    for loser in data['top_losers']:
        message += f"üîª {loser[0]}   ~${loser[1]:.2f}   [{loser[2]:.2f}%]\n"

    message += (
        f"\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –∫–∞–ø—ñ—Ç–∞–ª–∏–∑–∞—Ü—ñ—è —Ä–∏–Ω–∫—É: {format_number(data['total_market_cap'])}\n"
        f"üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±'—î–º –∑–∞ 24 –≥–æ–¥–∏–Ω–∏: {format_number(data['total_volume'])}\n"
    )

    return message


# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª
async def send_update(context: ContextTypes.DEFAULT_TYPE):
    chat_id = '-1002620853264'  # ID –≤–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É
    message = format_message()
    await context.bot.send_message(chat_id=chat_id, text=message)


# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    # –°—Ç–≤–æ—Ä—ñ—Ç—å –æ–±'—î–∫—Ç Application
    application = Application.builder().token("7739046482:AAEvEHReu3m-ttT3-UsD-7N-D0whSjRvnkU").build()

    # –î–æ–¥–∞–π—Ç–µ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))

    # –ù–∞–ª–∞—à—Ç—É–π—Ç–µ JobQueue –¥–ª—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
    job_queue = application.job_queue
    job_queue.run_repeating(send_update, interval=10, first=0)  # –Ü–Ω—Ç–µ—Ä–≤–∞–ª 10 —Å–µ–∫—É–Ω–¥

    # –ó–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()