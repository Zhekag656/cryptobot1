from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import requests
from datetime import datetime
from pytz import timezone


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –∫—Ä–∏–ø—Ç–æ–±–æ—Ç. –Ø –±—É–¥—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥.")


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É —Å—Ç—Ä–∞—Ö—É —Ç–∞ –∂–∞–¥—ñ–±–Ω–æ—Å—Ç—ñ
def get_fear_greed_index():
    try:
        url = "https://api.alternative.me/fng/"
        response = requests.get(url)
        data = response.json()

        translations = {
            "Extreme Fear": "–ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏–π —Å—Ç—Ä–∞—Ö",
            "Fear": "–°—Ç—Ä–∞—Ö",
            "Neutral": "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ",
            "Greed": "–ñ–∞–¥—ñ–±–Ω—ñ—Å—Ç—å",
            "Extreme Greed": "–ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞ –∂–∞–¥—ñ–±–Ω—ñ—Å—Ç—å"
        }

        value_classification = data['data'][0]['value_classification']
        translated_classification = translations.get(value_classification, value_classification)

        return {
            'value': data['data'][0]['value'],
            'value_classification': translated_classification,
            'timestamp': data['data'][0]['timestamp']
        }
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω–¥–µ–∫—Å—É —Å—Ç—Ä–∞—Ö—É —Ç–∞ –∂–∞–¥—ñ–±–Ω–æ—Å—Ç—ñ: {e}")
        return {'value': 'N/A', 'value_classification': 'N/A', 'timestamp': 'N/A'}


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏
import requests

import requests

def get_crypto_data():
    try:
        # –í–∞—à API-–∫–ª—é—á CoinMarketCap
        API_KEY = "a9ab8f08-9d28-4835-bbcd-6afb1868254c"  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à API-–∫–ª—é—á

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø–∏—Ç—É
        headers = {
            "Accepts": "application/json",
            "X-CMC_PRO_API_KEY": API_KEY,
        }

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏
        url_cryptos = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest"
        params_cryptos = {
            "start": "1",  # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–µ—Ä—à–æ—ó –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏
            "limit": "250",  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            "convert": "USD",  # –í–∞–ª—é—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
        }
        response_cryptos = requests.get(url_cryptos, headers=headers, params=params_cryptos)
        cryptos_data = response_cryptos.json()

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–∏–Ω–æ–∫
        url_global = "https://pro-api.coinmarketcap.com/v1/global-metrics/quotes/latest"
        response_global = requests.get(url_global, headers=headers)
        global_data = response_global.json()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –¥–∞–Ω—ñ
        if "data" not in cryptos_data or "data" not in global_data:
            print("–ü–æ–º–∏–ª–∫–∞: API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–ª–æ –¥–∞–Ω—ñ.")
            return {}

        # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è BTC —ñ ETH
        btc_data = next((coin for coin in cryptos_data["data"] if coin["symbol"] == "BTC"), None)
        eth_data = next((coin for coin in cryptos_data["data"] if coin["symbol"] == "ETH"), None)

        if not btc_data or not eth_data:
            print("–ü–æ–º–∏–ª–∫–∞: –î–∞–Ω—ñ –ø—Ä–æ BTC –∞–±–æ ETH –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
            return {}

        # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–æ–ø –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è —ñ –ø–∞–¥—ñ–Ω–Ω—è
        changes = [
            {
                "symbol": coin["symbol"],
                "price": coin["quote"]["USD"]["price"],
                "change": coin["quote"]["USD"]["percent_change_24h"],
            }
            for coin in cryptos_data["data"]
            if coin["quote"]["USD"]["percent_change_24h"] is not None
        ]

        # –¢–æ–ø 3 –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è —ñ –ø–∞–¥—ñ–Ω–Ω—è
        top_gainers = sorted(changes, key=lambda x: x["change"], reverse=True)[:3]
        top_losers = sorted(changes, key=lambda x: x["change"])[:3]

        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        return {
            "btc_price": btc_data["quote"]["USD"]["price"],
            "btc_change": btc_data["quote"]["USD"]["percent_change_24h"],
            "eth_price": eth_data["quote"]["USD"]["price"],
            "eth_change": eth_data["quote"]["USD"]["percent_change_24h"],
            "btc_dominance": global_data["data"]["btc_dominance"],
            "eth_dominance": global_data["data"]["eth_dominance"],
            "total_market_cap": format_number(global_data["data"]["quote"]["USD"]["total_market_cap"]),
            "total_volume": format_number(global_data["data"]["quote"]["USD"]["total_volume_24h"]),
            "top_gainers": top_gainers,
            "top_losers": top_losers,
        }
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
        return {}


# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–µ–ª–∏–∫–∏—Ö —á–∏—Å–µ–ª
def format_number(value):
    """
    –§–æ—Ä–º–∞—Ç—É—î –≤–µ–ª–∏–∫—ñ —á–∏—Å–ª–∞ —É —Å–∫–æ—Ä–æ—á–µ–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ (–º–ª–Ω, –º–ª—Ä–¥, —Ç—Ä–ª–Ω).
    """
    try:
        value = float(value)
        if value >= 1_000_000_000_000:
            return f"{value / 1_000_000_000_000:.2f}T"  # –¢—Ä–∏–ª—å–π–æ–Ω–∏
        elif value >= 1_000_000_000:
            return f"{value / 1_000_000_000:.2f}B"  # –ú—ñ–ª—å—è—Ä–¥–∏
        elif value >= 1_000_000:
            return f"{value / 1_000_000:.2f}M"  # –ú—ñ–ª—å–π–æ–Ω–∏
        else:
            return f"{value:,.2f}"  # –ó–∞–ª–∏—à–∏—Ç–∏ –±–µ–∑ –∑–º—ñ–Ω –¥–ª—è –º–µ–Ω—à–∏—Ö —á–∏—Å–µ–ª
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–ª–∞: {e}")
        return "N/A"

def format_price(price):
    """
    –§–æ—Ä–º–∞—Ç—É—î —Ü—ñ–Ω—É –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤:
    - –Ø–∫—â–æ —Ü—ñ–Ω–∞ >= 1: –¥–≤–∞ –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞–∫–∏
    - –Ø–∫—â–æ 0.01 <= —Ü—ñ–Ω–∞ < 1: —á–æ—Ç–∏—Ä–∏ –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞–∫–∏
    - –Ø–∫—â–æ —Ü—ñ–Ω–∞ < 0.01: –≤—ñ—Å—ñ–º –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤
    """
    if price >= 1:
        return f"{price:.2f}"
    elif price >= 0.01:
        return f"{price:.4f}"
    else:
        return f"{price:.8f}"

# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def format_message():
    data = get_crypto_data()

    if not data:
        return "–ü–æ–º–∏–ª–∫–∞: –î–∞–Ω—ñ –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–ø –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è —ñ –ø–∞–¥—ñ–Ω–Ω—è
    top_gainers = "\n".join(
        [f"üöÄ {coin['symbol']}/USDT ~${format_price(coin['price'])} [+{coin['change']:.2f}%]"
         for coin in data["top_gainers"]]
    )
    top_losers = "\n".join(
        [f"üîª {coin['symbol']}/USDT ~${format_price(coin['price'])} [{coin['change']:.2f}%]"
         for coin in data["top_losers"]]
    )

    return (
        f"–î–∞—Ç–∞ —Ç–∞ —á–∞—Å (–ö–∏—ó–≤): 2025-03-18 14:38:45\n\n"
        f"üí≤ –¶—ñ–Ω–∞ BTC: ~${format_price(data['btc_price'])} ({data['btc_change']:.2f}%)\n"
        f"üí≤ –¶—ñ–Ω–∞ ETH: ~${format_price(data['eth_price'])} ({data['eth_change']:.2f}%)\n\n"
        f"üí™ –î–æ–º—ñ–Ω–∞—Ü—ñ—è BTC: {data['btc_dominance']:.2f}%\n"
        f"üí™ –î–æ–º—ñ–Ω–∞—Ü—ñ—è ETH: {data['eth_dominance']:.2f}%\n\n"
        f"üìà –¢–æ–ø 3 –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è –∑–∞ –¥–æ–±—É:\n{top_gainers}\n\n"
        f"üìâ –¢–æ–ø 3 –∑–Ω–∏–∂–µ–Ω–Ω—è –∑–∞ –¥–æ–±—É:\n{top_losers}\n\n"
        f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –∫–∞–ø—ñ—Ç–∞–ª–∏–∑–∞—Ü—ñ—è —Ä–∏–Ω–∫—É: ${data['total_market_cap']}\n"
        f"üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±'—î–º –∑–∞ 24 –≥–æ–¥–∏–Ω–∏: ${data['total_volume']}\n"
    )

    return message


# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª
async def send_update(context: ContextTypes.DEFAULT_TYPE):
    chat_id = '-1002620853264'  # ID –≤–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É
    message = format_message()
    await context.bot.send_message(chat_id=chat_id, text=message)


# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    application = Application.builder().token("7739046482:AAEvEHReu3m-ttT3-UsD-7N-D0whSjRvnkU").build()
    application.add_handler(CommandHandler("start", start))

    job_queue = application.job_queue
    job_queue.run_repeating(send_update, interval=10, first=0)

    application.run_polling()


if __name__ == "__main__":
    main()